// Jenkinsfile for Python + Pytest + Selenium Project
// Repository: https://github.com/goodtogo01/End2End_Python

pipeline {
    // Defines where the pipeline will execute.
    // 'agent any' means it can run on any available Jenkins agent.
    // For specific environments (e.g., agents with browsers installed),
    // you might use 'agent { label 'your-selenium-agent-label' }'
    agent any

    // Define environment variables accessible throughout the pipeline.
    // This is useful for configurations like browser choice.
    environment {
        // Example: BROWSER = 'chrome' or 'firefox'
        // For headless execution on Linux, you might need to set DISPLAY for Xvfb
        // DISPLAY = ':99'
    }

    // Stages define the sequential steps of your CI/CD pipeline.
    stages {
        stage('Checkout Source Code') {
            steps {
                echo 'Checking out source code from Git...'
                git url: 'https://github.com/goodtogo01/End2End_Python.git',
                    branch: 'main' // Assuming 'main' is your primary branch. Adjust if different (e.g., 'master').
            }
        }

        stage('Setup Python Environment & Install Dependencies') {
            steps {
                script {
                    echo 'Setting up Python virtual environment...'
                    // Create a Python virtual environment named 'venv'
                    sh 'python3 -m venv venv'

                    echo 'Activating venv, upgrading pip, and handling webdriver_manager...'
                    // Activate the virtual environment for subsequent commands in this block
                    sh '. venv/bin/activate && \\' + // Use '\' for line continuation in Groovy sh block
                       'pip install --upgrade pip && \\' + // Upgrade pip within the virtual environment
                       'pip install --upgrade webdriver-manager' // Upgrade webdriver-manager within the virtual environment

                    // Remove the problematic cache directory for webdriver_manager.
                    // This typically resides in the user's home directory on the Jenkins agent.
                    // Running this after activating venv ensures we're in the correct user context.
                    sh 'rm -rf ~/.wdm'
                    echo 'webdriver_manager cache cleared and library upgraded.'

                    echo 'Installing project-specific dependencies from requirements.txt...'
                    // Install project-specific dependencies from requirements.txt
                    sh '. venv/bin/activate && pip install --no-cache-dir -r requirements.txt'
                    echo 'Python environment setup complete.'

                    // --- IMPORTANT for Headless Browsers on Linux Agents ---
                    // If your Jenkins agent is a Linux server without a GUI, you'll need Xvfb (Virtual Framebuffer)
                    // and ensure your Selenium code runs in headless mode.
                    // Example (uncomment if applicable and ensure Xvfb is installed on agent):
                    // sh 'Xvfb :99 -screen 0 1024x768x24 & export DISPLAY=:99'
                    // Make sure your Selenium test code explicitly sets ChromeOptions().add_argument('--headless')
                    // or FirefoxOptions().add_argument('--headless').
                }
            }
        }

        stage('Run Pytest Selenium Tests') {
            steps {
                script {
                    echo 'Running Pytest tests with Selenium...'
                    // Activate the virtual environment and run pytest
                    // 'tests/' assumes your tests are in a folder named 'tests'
                    // '--html=report.html --self-contained-html' generates a single HTML report (requires pytest-html)
                    // '--junitxml=results.xml' generates a JUnit XML report for Jenkins' built-in test reporting
                    // '|| true' ensures the stage completes even if tests fail, allowing reports to be published.
                    // Jenkins will still mark the build as 'UNSTABLE' or 'FAILED' based on JUnit results.
                    sh '. venv/bin/activate && pytest tests/ --html=report.html --self-contained-html --junitxml=results.xml || true'
                    echo 'Pytest execution finished.'
                }
            }
        }

        stage('Publish Test Reports') {
            steps {
                echo 'Publishing test reports...'
                // Publish the HTML report generated by pytest-html
                publishHTML (
                    target: [
                        allowMissing: false, // Set to true if the report might not always be generated
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: '.',       // Directory where report.html is located (relative to workspace)
                        reportFiles: 'report.html',
                        reportName: 'Pytest HTML Report'
                    ]
                )
                // Publish JUnit XML results for Jenkins' built-in test result trends and details
                junit 'results.xml' // Assumes results.xml is in the workspace root
                echo 'Reports published.'
            }
        }
    }

    // Post-build actions: These run after all stages have attempted to complete.
    post {
        // 'always' actions run regardless of the pipeline's outcome.
        always {
            echo 'Cleaning up workspace...'
            cleanWs() // Cleans up the Jenkins workspace after the build
            // If you started Xvfb, you might kill it here (e.g., sh 'killall Xvfb' or similar)
        }
        // 'success' actions run if all stages completed successfully.
        success {
            echo 'Pipeline completed successfully!'
            // You can add notifications here, e.g., Slack, email
            // slackSend channel: '#devops', message: 'Pytest-Selenium build succeeded!'
        }
        // 'failure' actions run if any stage explicitly failed.
        failure {
            echo 'Pipeline failed!'
            // Add failure notifications
            // mail to: 'your-email@example.com', subject: "Jenkins Build Failed: ${env.JOB_NAME}", body: "Build ${env.BUILD_NUMBER} failed. Check ${env.BUILD_URL}console for details."
        }
        // 'unstable' actions run if the pipeline completed but had test failures (due to '|| true' in pytest)
        unstable {
            echo 'Pipeline completed but tests had failures/skipped!'
        }
    }
}